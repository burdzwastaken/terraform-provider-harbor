// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quota API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quota API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetQuotas lists quotas

List quotas
*/
func (a *Client) GetQuotas(params *GetQuotasParams, authInfo runtime.ClientAuthInfoWriter) (*GetQuotasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQuotasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQuotas",
		Method:             "GET",
		PathPattern:        "/quotas",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQuotasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQuotasOK), nil

}

/*
GetQuotasID gets the specified quota

Get the specified quota
*/
func (a *Client) GetQuotasID(params *GetQuotasIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetQuotasIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQuotasIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQuotasID",
		Method:             "GET",
		PathPattern:        "/quotas/{id}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQuotasIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQuotasIDOK), nil

}

/*
PutQuotasID updates the specified quota

Update hard limits of the specified quota
*/
func (a *Client) PutQuotasID(params *PutQuotasIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutQuotasIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutQuotasIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutQuotasID",
		Method:             "PUT",
		PathPattern:        "/quotas/{id}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutQuotasIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutQuotasIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
